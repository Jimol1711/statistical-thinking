p1 <- ggplot(df_0, aes(x = x, y = p_hat)) +
geom_line(color = "blue") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 0)", x = "n", y = "Estimator of p") +
theme_minimal()
# sigma = 1
cte <- rep(0.5,1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 1)  # sigma = 1
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_1 <- data.frame(x = x, p_hat = data)
bias_1 <- calculate_bias(data)
p2 <- ggplot(df_1, aes(x = x, y = p_hat)) +
geom_line(color = "red") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 1)", x = "n", y = "Estimator of p") +
theme_minimal()
# sigma = 2
cte <- rep(0.5,1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 2)  # sigma = 2
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_2 <- data.frame(x = x, p_hat = data)
bias_2 <- calculate_bias(data)
p3 <- ggplot(df_2, aes(x = x, y = p_hat)) +
geom_line(color = "green") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 2)", x = "n", y = "Estimator of p") +
theme_minimal()
# sigma = 4
cte <- rep(0.5,1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 4)  # sigma = 4
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_4 <- data.frame(x = x, p_hat = data)
bias_4 <- calculate_bias(data)
p4 <- ggplot(df_4, aes(x = x, y = p_hat)) +
geom_line(color = "purple") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 4)", x = "n", y = "Estimator of p") +
theme_minimal()
# Print plots
print(p1)
print(p2)
print(p3)
print(p4)
# Print out the biases for each sigma
cat("Bias for sigma = 0:", bias_0, "\n")
cat("Bias for sigma = 1:", bias_1, "\n")
cat("Bias for sigma = 2:", bias_2, "\n")
cat("Bias for sigma = 4:", bias_4, "\n")
datos <- read.csv("diabetes_prediction_dataset.csv", header = TRUE)
head(datos)
# Plot de Intervalos de confianza
# Gráfico para BMI
ggplot(df_bmi, aes(y = 1:100, x = mean)) +
geom_point(aes(color = outside_ci)) +
geom_errorbarh(aes(xmin = lower, xmax = upper, color = outside_ci), height = 0.2) +
scale_color_manual(values = c("Dentro" = "black", "Fuera" = "red")) +
geom_vline(xintercept = real_mean_bmi, color = "red", linetype = "dashed") +
labs(title = "Intervalos de Confianza para BMI", x = "Valor", y = "Muestra") +
theme_minimal()
# Plot de Intervalos de confianza
# Gráfico para Blood Glucose Level
ggplot(df_bgl, aes(y = 1:100, x = mean)) +
geom_point(aes(color = outside_ci)) +
geom_errorbarh(aes(xmin = lower, xmax = upper, color = outside_ci), height = 0.2) +
scale_color_manual(values = c("Dentro" = "black", "Fuera" = "red")) +
geom_vline(xintercept = real_mean_bgl, color = "red", linetype = "dashed") +
labs(title = "Intervalos de Confianza para Blood Glucose Level", x = "Valor", y = "Muestra") +
theme_minimal()
linearMod <- lm(bmi ~ age, data=datos)
print(linearMod)
m <- linearMod$coefficients["age"]
b <- linearMod$coefficients["(Intercept)"]
ggplot() +
geom_point(aes(x=datos$age, y=datos$bmi)) +
geom_line(aes(x=datos$age, y=datos$age*m+b), color="red") +
ggtitle("Regresión lineal") +
ylab("bmi") +
xlab("Age")
# Manipulación de estructuras
library(tidyverse)
# Para realizar plots
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Function to calculate bias
calculate_bias <- function(estimates, p_true = 0.5) {
mean(estimates) - p_true
}
# sigma = 0
cte <- rep(0.5, 1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 0)
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_0 <- data.frame(x = x, p_hat = data)
bias_0 <- calculate_bias(data)
# Create individual plots
p1 <- ggplot(df_0, aes(x = x, y = p_hat)) +
geom_line(color = "blue") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 0)", x = "n", y = "Estimator of p") +
theme_minimal()
# sigma = 1
cte <- rep(0.5,1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 1)  # sigma = 1
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_1 <- data.frame(x = x, p_hat = data)
bias_1 <- calculate_bias(data)
p2 <- ggplot(df_1, aes(x = x, y = p_hat)) +
geom_line(color = "red") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 1)", x = "n", y = "Estimator of p") +
theme_minimal()
# sigma = 2
cte <- rep(0.5,1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 2)  # sigma = 2
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_2 <- data.frame(x = x, p_hat = data)
bias_2 <- calculate_bias(data)
p3 <- ggplot(df_2, aes(x = x, y = p_hat)) +
geom_line(color = "green") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 2)", x = "n", y = "Estimator of p") +
theme_minimal()
# sigma = 4
cte <- rep(0.5,1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 4)  # sigma = 4
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_4 <- data.frame(x = x, p_hat = data)
bias_4 <- calculate_bias(data)
p4 <- ggplot(df_4, aes(x = x, y = p_hat)) +
geom_line(color = "purple") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 4)", x = "n", y = "Estimator of p") +
theme_minimal()
# Print plots
print(p1)
print(p2)
print(p3)
print(p4)
# Print out the biases for each sigma
cat("Bias for sigma = 0:", bias_0, "\n")
cat("Bias for sigma = 1:", bias_1, "\n")
cat("Bias for sigma = 2:", bias_2, "\n")
cat("Bias for sigma = 4:", bias_4, "\n")
datos <- read.csv("diabetes_prediction_dataset.csv", header = TRUE)
head(datos)
# Plot de Intervalos de confianza
# Gráfico para BMI
ggplot(df_bmi, aes(y = 1:100, x = mean)) +
geom_point(aes(color = outside_ci)) +
geom_errorbarh(aes(xmin = lower, xmax = upper, color = outside_ci), height = 0.2) +
scale_color_manual(values = c("Dentro" = "black", "Fuera" = "red")) +
geom_vline(xintercept = real_mean_bmi, color = "red", linetype = "dashed") +
labs(title = "Intervalos de Confianza para BMI", x = "Valor", y = "Muestra") +
theme_minimal()
# Plot de Intervalos de confianza
# Gráfico para Blood Glucose Level
ggplot(df_bgl, aes(y = 1:100, x = mean)) +
geom_point(aes(color = outside_ci)) +
geom_errorbarh(aes(xmin = lower, xmax = upper, color = outside_ci), height = 0.2) +
scale_color_manual(values = c("Dentro" = "black", "Fuera" = "red")) +
geom_vline(xintercept = real_mean_bgl, color = "red", linetype = "dashed") +
labs(title = "Intervalos de Confianza para Blood Glucose Level", x = "Valor", y = "Muestra") +
theme_minimal()
linearMod <- lm(bmi ~ age, data=datos)
print(linearMod)
m <- linearMod$coefficients["age"]
b <- linearMod$coefficients["(Intercept)"]
ggplot() +
geom_point(aes(x=datos$age, y=datos$bmi)) +
geom_line(aes(x=datos$age, y=datos$age*m+b), color="red") +
ggtitle("Regresión lineal") +
ylab("bmi") +
xlab("Age")
# Manipulación de estructuras
library(tidyverse)
# Para realizar plots
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Function to calculate bias
calculate_bias <- function(estimates, p_true = 0.5) {
mean(estimates) - p_true
}
# sigma = 0
cte <- rep(0.5, 1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 0)
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_0 <- data.frame(x = x, p_hat = data)
bias_0 <- calculate_bias(data)
# Create individual plots
p1 <- ggplot(df_0, aes(x = x, y = p_hat)) +
geom_line(color = "blue") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 0)", x = "n", y = "Estimator of p") +
theme_minimal()
# sigma = 1
cte <- rep(0.5,1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 1)  # sigma = 1
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_1 <- data.frame(x = x, p_hat = data)
bias_1 <- calculate_bias(data)
p2 <- ggplot(df_1, aes(x = x, y = p_hat)) +
geom_line(color = "red") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 1)", x = "n", y = "Estimator of p") +
theme_minimal()
# sigma = 2
cte <- rep(0.5,1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 2)  # sigma = 2
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_2 <- data.frame(x = x, p_hat = data)
bias_2 <- calculate_bias(data)
p3 <- ggplot(df_2, aes(x = x, y = p_hat)) +
geom_line(color = "green") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 2)", x = "n", y = "Estimator of p") +
theme_minimal()
# sigma = 4
cte <- rep(0.5,1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 4)  # sigma = 4
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_4 <- data.frame(x = x, p_hat = data)
bias_4 <- calculate_bias(data)
p4 <- ggplot(df_4, aes(x = x, y = p_hat)) +
geom_line(color = "purple") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 4)", x = "n", y = "Estimator of p") +
theme_minimal()
# Print plots
print(p1)
print(p2)
print(p3)
print(p4)
# Print out the biases for each sigma
cat("Bias for sigma = 0:", bias_0, "\n")
cat("Bias for sigma = 1:", bias_1, "\n")
cat("Bias for sigma = 2:", bias_2, "\n")
cat("Bias for sigma = 4:", bias_4, "\n")
datos <- read.csv("diabetes_prediction_dataset.csv", header = TRUE)
head(datos)
linearMod <- lm(bmi ~ age, data=datos)
print(linearMod)
m <- linearMod$coefficients["age"]
b <- linearMod$coefficients["(Intercept)"]
ggplot() +
geom_point(aes(x=datos$age, y=datos$bmi)) +
geom_line(aes(x=datos$age, y=datos$age*m+b), color="red") +
ggtitle("Regresión lineal") +
ylab("bmi") +
xlab("Age")
# Manipulación de estructuras
library(tidyverse)
# Para realizar plots
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Function to calculate bias
calculate_bias <- function(estimates, p_true = 0.5) {
mean(estimates) - p_true
}
# sigma = 0
cte <- rep(0.5, 1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 0)
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_0 <- data.frame(x = x, p_hat = data)
bias_0 <- calculate_bias(data)
# Create individual plots
p1 <- ggplot(df_0, aes(x = x, y = p_hat)) +
geom_line(color = "blue") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 0)", x = "n", y = "Estimator of p") +
theme_minimal()
# sigma = 1
cte <- rep(0.5,1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 1)  # sigma = 1
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_1 <- data.frame(x = x, p_hat = data)
bias_1 <- calculate_bias(data)
p2 <- ggplot(df_1, aes(x = x, y = p_hat)) +
geom_line(color = "red") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 1)", x = "n", y = "Estimator of p") +
theme_minimal()
# sigma = 2
cte <- rep(0.5,1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 2)  # sigma = 2
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_2 <- data.frame(x = x, p_hat = data)
bias_2 <- calculate_bias(data)
p3 <- ggplot(df_2, aes(x = x, y = p_hat)) +
geom_line(color = "green") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 2)", x = "n", y = "Estimator of p") +
theme_minimal()
# sigma = 4
cte <- rep(0.5,1000)
x <- 1:1000
data <- c()
for (n in x) {
X <- rbinom(n, 1, 0.5)
epsilon_sigma <- rnorm(1, 0, 4)  # sigma = 4
p_hat <- epsilon_sigma + mean(X)
data <- c(data, p_hat)
}
df_4 <- data.frame(x = x, p_hat = data)
bias_4 <- calculate_bias(data)
p4 <- ggplot(df_4, aes(x = x, y = p_hat)) +
geom_line(color = "purple") +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(title = "Estimator of p (sigma = 4)", x = "n", y = "Estimator of p") +
theme_minimal()
# Print plots
print(p1)
print(p2)
print(p3)
print(p4)
# Print out the biases for each sigma
cat("Bias for sigma = 0:", bias_0, "\n")
cat("Bias for sigma = 1:", bias_1, "\n")
cat("Bias for sigma = 2:", bias_2, "\n")
cat("Bias for sigma = 4:", bias_4, "\n")
datos <- read.csv("diabetes_prediction_dataset.csv", header = TRUE)
head(datos)
# Definimos tamaños de muestreo
tamano_muestra = 100
n_muestras = 5000
# Inicializamos estructuras necesarias
list_mean_bmi = vector()
list_interval_bmi_left = vector()
list_interval_bmi_right = vector()
sucess_bmi = 0
list_mean_bgl = vector()
list_interval_bgl_left = vector()
list_interval_bgl_right = vector()
sucess_bgl = 0
# Obtenemos la media y desviación estándar de la población real
real_mean_bmi <- mean(datos$bmi)
real_sd_bmi <- sd(datos$bmi)
real_mean_bgl <- mean(datos$blood_glucose_level)
real_sd_bgl <- sd(datos$blood_glucose_level)
# Sampling distribution, calculo del intervalo de confianza y proporción.
for (i in 1:n_muestras) {
# Generating samples
sample_bmi <- sample(datos$bmi, tamano_muestra)
sample_bgl <- sample(datos$blood_glucose_level, tamano_muestra)
# Sampling distribution of the mean
list_mean_bmi <- c(list_mean_bmi, mean(sample_bmi))
list_mean_bgl <- c(list_mean_bgl, mean(sample_bgl))
# Standard deviations of the samples
sd_bmi <- sd(sample_bmi)
sd_bgl <- sd(sample_bgl)
# Calculating bmi confidence interval
margin_error_bmi <- 1.96 * (sd_bmi / sqrt(tamano_muestra))
ci_lower_bmi <- mean(sample_bmi) - margin_error_bmi
ci_upper_bmi <- mean(sample_bmi) + margin_error_bmi
list_interval_bmi_left <- rbind(list_interval_bmi_left, ci_lower_bmi)
list_interval_bmi_right <- rbind(list_interval_bmi_right, ci_upper_bmi)
# Calculating bgl confidence interval
margin_error_bgl <- 1.96 * (sd_bgl / sqrt(tamano_muestra))
ci_lower_bgl <- mean(sample_bgl) - margin_error_bgl
ci_upper_bgl <- mean(sample_bgl) + margin_error_bgl
list_interval_bgl_left <- rbind(list_interval_bgl_left, ci_lower_bgl)
list_interval_bgl_right <- rbind(list_interval_bgl_right, ci_upper_bgl)
# Verify if the real mean is within the confidence interval
if (ci_lower_bmi <= real_mean_bmi && ci_upper_bmi >= real_mean_bmi) {
sucess_bmi <- sucess_bmi + 1
}
if (ci_lower_bgl <= real_mean_bgl && ci_upper_bgl >= real_mean_bgl) {
sucess_bgl <- sucess_bgl + 1
}
}
# Proporción de intervalos que contienen la media real
prop_bmi <- sucess_bmi / n_muestras
prop_bgl <- sucess_bgl / n_muestras
cat("Proporción de intervalos que contienen la media real (BMI):", prop_bmi, "\n")
cat("Proporción de intervalos que contienen la media real (Blood Glucose Level):", prop_bgl, "\n")
# Convertir los datos a dataframes
df_bmi <- data.frame(
mean = list_mean_bmi,
lower = list_interval_bmi_left,
upper = list_interval_bmi_right
)
df_bgl <- data.frame(
mean = list_mean_bgl,
lower = list_interval_bgl_left,
upper = list_interval_bgl_right
)
df_bmi <- head(df_bmi, 100)
df_bgl <- head(df_bgl, 100)
# Columna que nos indica si la media real está dentro del intervalo de confianza calculado
df_bmi$outside_ci <- ifelse(df_bmi$lower > real_mean_bmi | df_bmi$upper < real_mean_bmi, "Fuera", "Dentro")
df_bgl$outside_ci <- ifelse(df_bgl$lower > real_mean_bgl | df_bgl$upper < real_mean_bgl, "Fuera", "Dentro")
# Normalización de las columnas
# Esto no lo usé al final pero lo dejé igual
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Plot de Intervalos de confianza
# Gráfico para BMI
ggplot(df_bmi, aes(y = 1:100, x = mean)) +
geom_point(aes(color = outside_ci)) +
geom_errorbarh(aes(xmin = lower, xmax = upper, color = outside_ci), height = 0.2) +
scale_color_manual(values = c("Dentro" = "black", "Fuera" = "red")) +
geom_vline(xintercept = real_mean_bmi, color = "red", linetype = "dashed") +
labs(title = "Intervalos de Confianza para BMI", x = "Valor", y = "Muestra") +
theme_minimal()
# Plot de Intervalos de confianza
# Gráfico para Blood Glucose Level
ggplot(df_bgl, aes(y = 1:100, x = mean)) +
geom_point(aes(color = outside_ci)) +
geom_errorbarh(aes(xmin = lower, xmax = upper, color = outside_ci), height = 0.2) +
scale_color_manual(values = c("Dentro" = "black", "Fuera" = "red")) +
geom_vline(xintercept = real_mean_bgl, color = "red", linetype = "dashed") +
labs(title = "Intervalos de Confianza para Blood Glucose Level", x = "Valor", y = "Muestra") +
theme_minimal()
linearMod <- lm(bmi ~ age, data=datos)
print(linearMod)
m <- linearMod$coefficients["age"]
b <- linearMod$coefficients["(Intercept)"]
ggplot() +
geom_point(aes(x=datos$age, y=datos$bmi)) +
geom_line(aes(x=datos$age, y=datos$age*m+b), color="red") +
ggtitle("Regresión lineal") +
ylab("bmi") +
xlab("Age")
