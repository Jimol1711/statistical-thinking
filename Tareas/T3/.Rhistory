main = "Comparación de Probabilidad Empírica y Real")
lines(m_values, real_probs, type = "o", col = "red", pch = 17)
legend("bottomright", legend = c("Probabilidad Empírica", "Probabilidad Real"),
col = c("blue", "red"), pch = c(16, 17), lty = 1)
# Código modificado utilizando Bonferroni correction
probEmpiricaBonferroni <- function(alpha,m){
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad
res <-rbinom(n, m, alpha) #Resultados de los experimentos
prob <- length(res[res>0]) / n # Probabilidad empírica
return(prob)
}
# Real probability
probRealBonferroni <- function(alpha, m) {
return(1 - (1 - alpha)^m)
}
# Different values for m
m_values_b <- 1:50
alpha_b <- 0.05
# Calculate both probabilities
empirical_probs_b <- sapply(m_values_b, function(m) probEmpirica(alpha_b, m))
real_probs_b <- sapply(m_values_b, function(m) probReal(alpha_b, m))
# Graficar resultados
plot(m_values_b, empirical_probs_b, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = "Número de ensayos (m)", ylab = "Probabilidad",
main = "Comparación de Probabilidad Empírica y Real con Bonferroni Correction")
lines(m_values_b, real_probs_b, type = "o", col = "red", pch = 17)
legend("bottomright", legend = c("Probabilidad Empírica", "Probabilidad Real"),
col = c("blue", "red"), pch = c(16, 17), lty = 1)
# Código modificado utilizando Bonferroni correction
probEmpiricaBonferroni <- function(alpha,m){
actual_alpha <- alpha / m
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad
res <-rbinom(n, m, actual_alpha) #Resultados de los experimentos
prob <- length(res[res>0]) / n # Probabilidad empírica
return(prob)
}
# Real probability
probRealBonferroni <- function(alpha, m) {
actual_alpha <- alpha / m
return(1 - (1 - actual_alpha)^m)
}
# Different values for m
m_values_b <- 1:50
alpha_b <- 0.05
# Calculate both probabilities
empirical_probs_b <- sapply(m_values_b, function(m) probEmpirica(alpha_b, m))
real_probs_b <- sapply(m_values_b, function(m) probReal(alpha_b, m))
# Graficar resultados
plot(m_values_b, empirical_probs_b, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = "Número de ensayos (m)", ylab = "Probabilidad",
main = "Comparación de Probabilidad Empírica y Real con Bonferroni Correction")
lines(m_values_b, real_probs_b, type = "o", col = "red", pch = 17)
legend("bottomright", legend = c("Probabilidad Empírica", "Probabilidad Real"),
col = c("blue", "red"), pch = c(16, 17), lty = 1)
# Código modificado utilizando Bonferroni correction
probEmpiricaBonferroni <- function(alpha,m){
actual_alpha <- alpha / m
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad
res <-rbinom(n, m, actual_alpha) #Resultados de los experimentos
prob <- length(res[res>0]) / n # Probabilidad empírica
return(prob)
}
# Real probability
probRealBonferroni <- function(alpha, m) {
actual_alpha <- alpha / m
return(1 - (1 - actual_alpha)^m)
}
# Different values for m
m_values_b <- 1:50
alpha_b <- 0.05
# Calculate both probabilities
empirical_probs_b <- sapply(m_values_b, function(m) probEmpirica(alpha_b, m))
real_probs_b <- sapply(m_values_b, function(m) probReal(alpha_b, m))
# Graficar resultados
plot(m_values_b, empirical_probs_b, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = "Número de ensayos (m)", ylab = "Probabilidad",
main = "Comparación de Probabilidad Empírica y Real con Bonferroni Correction")
lines(m_values_b, real_probs_b, type = "o", col = "red", pch = 17)
legend("bottomright", legend = c("Probabilidad Empírica", "Probabilidad Real"),
col = c("blue", "red"), pch = c(16, 17), lty = 1)
probEmpirica <- function(alpha,m){
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad
res <-rbinom(n, m, alpha) #Resultados de los experimentos
prob <- length(res[res>0]) / n # Probabilidad empírica
return(prob)
}
# Real probability
probReal <- function(alpha, m) {
return(1 - (1 - alpha)^m)
}
# Different values for m
m_values <- 1:50
alpha <- 0.05
# Calculate both probabilities
empirical_probs <- sapply(m_values, function(m) probEmpirica(alpha, m))
real_probs <- sapply(m_values, function(m) probReal(alpha, m))
# Graficar resultados
plot(m_values, empirical_probs, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = "Número de ensayos (m)", ylab = "Probabilidad",
main = "Comparación de Probabilidad Empírica y Real")
lines(m_values, real_probs, type = "o", col = "red", pch = 17)
legend("bottomright", legend = c("Probabilidad Empírica", "Probabilidad Real"),
col = c("blue", "red"), pch = c(16, 17), lty = 1)
# Código modificado utilizando Bonferroni correction
probEmpiricaBonferroni <- function(alpha,m){
actual_alpha <- alpha / m
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad
res <-rbinom(n, m, actual_alpha) #Resultados de los experimentos
prob <- length(res[res>0]) / n # Probabilidad empírica
return(prob)
}
# Real probability
probRealBonferroni <- function(alpha, m) {
actual_alpha <- alpha / m
return(1 - (1 - actual_alpha)^m)
}
# Different values for m
m_values_b <- 1:50
alpha_b <- 0.05
# Calculate both probabilities
empirical_probs_b <- sapply(m_values_b, function(m) probEmpirica(alpha_b, m))
real_probs_b <- sapply(m_values_b, function(m) probReal(alpha_b, m))
# Graficar resultados
plot(m_values_b, empirical_probs_b, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = "Número de ensayos (m)", ylab = "Probabilidad",
main = "Comparación de Probabilidad Empírica y Real con Bonferroni Correction")
lines(m_values_b, real_probs_b, type = "o", col = "red", pch = 17)
legend("bottomright", legend = c("Probabilidad Empírica", "Probabilidad Real"),
col = c("blue", "red"), pch = c(16, 17), lty = 1)
# Código modificado utilizando Bonferroni correction
probEmpiricaBonferroni <- function(alpha,m){
actual_alpha <- alpha / m
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad
res <-rbinom(n, m, actual_alpha) #Resultados de los experimentos
prob <- length(res[res>0]) / n # Probabilidad empírica
return(prob)
}
# Real probability
probRealBonferroni <- function(alpha, m) {
actual_alpha <- alpha / m
return(1 - (1 - actual_alpha)^m)
}
# Different values for m
m_values_b <- 1:50
alpha_b <- 0.05
# Calculate both probabilities
empirical_probs_b <- sapply(m_values_b, function(m) probEmpiricaBonferroni(alpha_b, m))
real_probs_b <- sapply(m_values_b, function(m) probRealBonferroni(alpha_b, m))
# Graficar resultados
plot(m_values_b, empirical_probs_b, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = "Número de ensayos (m)", ylab = "Probabilidad",
main = "Comparación de Probabilidad Empírica y Real con Bonferroni Correction")
lines(m_values_b, real_probs_b, type = "o", col = "red", pch = 17)
legend("bottomright", legend = c("Probabilidad Empírica", "Probabilidad Real"),
col = c("blue", "red"), pch = c(16, 17), lty = 1)
# Código modificado utilizando Bonferroni correction
probEmpiricaBonferroni <- function(alpha,m){
actual_alpha <- alpha / m
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad
res <-rbinom(n, m, actual_alpha) #Resultados de los experimentos
prob <- length(res[res>0]) / n # Probabilidad empírica
return(prob)
}
# Real probability
probRealBonferroni <- function(alpha, m) {
actual_alpha <- alpha / m
return(1 - (1 - actual_alpha)^m)
}
# Different values for m
m_values_b <- 1:50
alpha_b <- 0.05
# Calculate both probabilities
empirical_probs_b <- sapply(m_values_b, function(m) probEmpiricaBonferroni(alpha_b, m))
real_probs_b <- sapply(m_values_b, function(m) probRealBonferroni(alpha_b, m))
# Graficar resultados
plot(m_values_b, empirical_probs_b, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = "Número de ensayos (m)", ylab = "Probabilidad",
main = "Comparación de Probabilidad Empírica y Real con Bonferroni Correction")
lines(m_values_b, real_probs_b, type = "o", col = "red", pch = 17)
legend("bottomright", legend = c("Probabilidad Empírica", "Probabilidad Real"),
col = c("blue", "red"), pch = c(16, 17), lty = 1)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
df = read.csv('marketing_campaign.csv', sep='\t')
head(df)
# Implementación de Z-test one-sided y two-sided
# Puede utilizar este esqueleto
z_test <- function(data1=NULL, sigma1=0.5, data2=NULL, sigma2=0.5,
mu.Ha=0, test.type = c('one-sided','two-sided'),
verbose=TRUE){
if(length(test.type)>=2){
print("Por favor escoge un tipo de Test: ´one-sided´ o ´two-sided´ ")
return()
}
else if(length(test.type)==1 && !(test.type %in% c('menor','mayor','two-sided'))){
print("Por favor escoge un tipo de Test: ´menor´, ´mayor´ o ´two-sided´")
return()
}
else if(is.null(data2)){
# P-value
if(test.type=='menor'){
}
else if(test.type=='mayor'){
}
else if(test.type=='two-sided'){
}
# Texto de Salida
if(verbose){
cat("\tOne-sample Z-Test:\n\nData analizada:",
deparse(substitute(data1)), "\nZ=", Z_score,
"P-value=", p_value, "\n\n",sep=" ")
}
return(p_value)
}
else if(!is.null(data2)){
# Hypothesis test
# p-value
if(test.type=='menor'){
p_value = ...
}
else if(test.type=='mayor'){
p_value = ...
}
else if(test.type=='two-sided'){
p_value = ...
}
# Texto de Salida
if(verbose){
cat("\tTwo-sample Z-Test:\n\nData analizada:",
deparse(substitute(data1)),"y",
deparse(substitute(data2)), "\nZ=",
Z_score, "P-value=", p_value, "\n\n",sep=" ")
}
return(p_value)
}
}
z.test.multiple_testing <- function(){
}
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
probEmpirica <- function(alpha,m){
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad
res <-rbinom(n, m, alpha) #Resultados de los experimentos
prob <- length(res[res>0]) / n # Probabilidad empírica
return(prob)
}
# Real probability
probReal <- function(alpha, m) {
return(1 - (1 - alpha)^m)
}
# Different values for m
m_values <- 1:50
alpha <- 0.05
# Calculate both probabilities
empirical_probs <- sapply(m_values, function(m) probEmpirica(alpha, m))
real_probs <- sapply(m_values, function(m) probReal(alpha, m))
# Graficar resultados
plot(m_values, empirical_probs, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = "Número de ensayos (m)", ylab = "Probabilidad",
main = "Comparación de Probabilidad Empírica y Real")
lines(m_values, real_probs, type = "o", col = "red", pch = 17)
legend("bottomright", legend = c("Probabilidad Empírica", "Probabilidad Real"),
col = c("blue", "red"), pch = c(16, 17), lty = 1)
# Código modificado utilizando Bonferroni correction
probEmpiricaBonferroni <- function(alpha,m){
actual_alpha <- alpha / m
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad
res <-rbinom(n, m, actual_alpha) #Resultados de los experimentos
prob <- length(res[res>0]) / n # Probabilidad empírica
return(prob)
}
# Real probability
probRealBonferroni <- function(alpha, m) {
actual_alpha <- alpha / m
return(1 - (1 - actual_alpha)^m)
}
# Different values for m
m_values_b <- 1:50
alpha_b <- 0.05
# Calculate both probabilities
empirical_probs_b <- sapply(m_values_b, function(m) probEmpiricaBonferroni(alpha_b, m))
real_probs_b <- sapply(m_values_b, function(m) probRealBonferroni(alpha_b, m))
# Graficar resultados
plot(m_values_b, empirical_probs_b, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = "Número de ensayos (m)", ylab = "Probabilidad",
main = "Comparación de Probabilidad Empírica y Real con Bonferroni Correction")
lines(m_values_b, real_probs_b, type = "o", col = "red", pch = 17)
legend("bottomright", legend = c("Probabilidad Empírica", "Probabilidad Real"),
col = c("blue", "red"), pch = c(16, 17), lty = 1)
# Código
# Parte I.
# Separate smokers from non-smokers
insurance <- read.csv("insurance.csv", stringsAsFactors = T)
smokers <- insurance[insurance$smoker == "yes",]
non_smokers <- insurance[insurance$smoker == "no",]
# Calculate cors
cor_smokers <- cor(smokers %>% select(age, bmi, children, charges))
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
data
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# We determine how many original p-values are rejected
sum(data$p.value < 0.05)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# We determine how many original p-values are rejected
# sum(data$p.value < 0.05)
data$p.value
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# We determine how many original p-values are rejected
sum(data$p.value < 0.05)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# We determine how many original p-values are rejected
sum(data$p.value < 0.05)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# We determine how many original p-values are rejected
sum(as.numeric(as.character(data$p.value)) < 0.05, na.rm = TRUE)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# Convert p.value to numeric
data$p.value <- as.numeric(as.character(data$p.value))
# Now, check for rows with p.value < 0.05
sum(data$p.value < 0.05, na.rm = TRUE)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# Identify rows where p.value is not numeric
non_numeric_rows <- data[!grepl("^[0-9.]+$", as.character(data$p.value)), ]
print(non_numeric_rows)
# Option 1: Remove rows with non-numeric values in p.value
data_cleaned <- data[grepl("^[0-9.]+$", as.character(data$p.value)), ]
# Convert p.value to numeric in the cleaned data
data_cleaned$p.value <- as.numeric(as.character(data_cleaned$p.value))
# Now, count rows with p.value < 0.05
sum(data_cleaned$p.value < 0.05, na.rm = TRUE)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# Identify rows where p.value is not numeric
non_numeric_rows <- data[!grepl("^[0-9.]+$", as.character(data$p.value)), ]
print(non_numeric_rows)
# Option 1: Remove rows with non-numeric values in p.value
data_cleaned <- data[grepl("^[0-9.]+$", as.character(data$p.value)), ]
# Convert p.value to numeric in the cleaned data
data_cleaned$p.value <- as.numeric(as.character(data_cleaned$p.value))
# Now, count rows with p.value < 0.05
cat(sum(data_cleaned$p.value < 0.05, na.rm = TRUE))
# p.value.Bonferroni
# Identify rows where p.value is not numeric
non_numeric_rows <- data[!grepl("^[0-9.]+$", as.character(data$p.value.Bonferroni)), ]
print(non_numeric_rows)
# Option 1: Remove rows with non-numeric values in p.value
data_cleaned <- data[grepl("^[0-9.]+$", as.character(data$p.value.Bonferroni)), ]
# Convert p.value to numeric in the cleaned data
data_cleaned$p.value.Bonferroni <- as.numeric(as.character(data_cleaned$p.value.Bonferroni))
# Now, count rows with p.value < 0.05
cat(sum(data_cleaned$p.value.Bonferroni < 0.05, na.rm = TRUE))
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
data$p.value
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
as.numeric(data$p.value)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
as.float(data$p.value)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
as.factor(data$p.value)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
nrow(subset(data, p.value < 0.05))
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# Convert p.value from factor to character, then to numeric
data$p.value <- as.numeric(as.character(data$p.value))
# Now count rows with p.value < 0.05, ignoring any NA values
sum(data$p.value < 0.05, na.rm = TRUE)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# Convert p.value from factor to character, then to numeric
data$p.value <- as.numeric(as.character(data$p.value))
# Now count rows with p.value < 0.05, ignoring any NA values
sum(data$p.value < 0.05, na.rm = TRUE)
cat(data$p.value)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
as.character(data$p.value)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
as.numeric(as.character(data$p.value))
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
data$p.value
View(df)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# Convert p.value to character, replace commas with periods, and then convert to numeric
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Now count rows where p.value < 0.05
sum(data$p.value < 0.05, na.rm = TRUE)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# p.value
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Count rows where p.value < 0.05
sum(data$p.value < 0.05, na.rm = TRUE)
# p.value.Bonferroni
data$p.value.Bonferroni <- as.numeric(gsub(",", ".", as.character(data$p.value.Bonferroni)))
# Count rows where p.value.Bonferroni < 0.05
sum(data$p.value.Bonferroni < 0.05, na.rm = TRUE)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# p.value
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Count rows where p.value < 0.05
cat("Hola", sum(data$p.value < 0.05, na.rm = TRUE))
# p.value.Bonferroni
data$p.value.Bonferroni <- as.numeric(gsub(",", ".", as.character(data$p.value.Bonferroni)))
# Count rows where p.value.Bonferroni < 0.05
sum(data$p.value.Bonferroni < 0.05, na.rm = TRUE)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# p.value
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Count rows where p.value < 0.05
cat("Hola", sum(data$p.value < 0.05, na.rm = TRUE), sep = "\n")
# p.value.Bonferroni
data$p.value.Bonferroni <- as.numeric(gsub(",", ".", as.character(data$p.value.Bonferroni)))
# Count rows where p.value.Bonferroni < 0.05
sum(data$p.value.Bonferroni < 0.05, na.rm = TRUE)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# p.value
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Count rows where p.value < 0.05
cat("Hola", sum(data$p.value < 0.05, na.rm = TRUE))
# p.value.Bonferroni
data$p.value.Bonferroni <- as.numeric(gsub(",", ".", as.character(data$p.value.Bonferroni)))
# Count rows where p.value.Bonferroni < 0.05
cat("\n", sum(data$p.value.Bonferroni < 0.05, na.rm = TRUE))
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# p.value
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Count rows where p.value < 0.05
cat("Hola", sum(data$p.value < 0.05, na.rm = TRUE))
# p.value.Bonferroni
data$p.value.Bonferroni <- as.numeric(gsub(",", ".", as.character(data$p.value.Bonferroni)))
# Count rows where p.value.Bonferroni < 0.05
cat("\n Hola", sum(data$p.value.Bonferroni < 0.05, na.rm = TRUE))
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# p.value
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Count rows where p.value < 0.05
cat("Hola", sum(data$p.value < 0.05, na.rm = TRUE))
# p.value.Bonferroni
data$p.value.Bonferroni <- as.numeric(gsub(",", ".", as.character(data$p.value.Bonferroni)))
# Count rows where p.value.Bonferroni < 0.05
cat("\nHola", sum(data$p.value.Bonferroni < 0.05, na.rm = TRUE))
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# p.value
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Count rows where p.value < 0.05
cat("Rejected values without BOnferroni:", sum(data$p.value < 0.05, na.rm = TRUE))
# p.value.Bonferroni
data$p.value.Bonferroni <- as.numeric(gsub(",", ".", as.character(data$p.value.Bonferroni)))
# Count rows where p.value.Bonferroni < 0.05
cat("\nHola", sum(data$p.value.Bonferroni < 0.05, na.rm = TRUE))
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# p.value
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Count rows where p.value < 0.05
cat("Rejected values without Bonferroni:", sum(data$p.value < 0.05, na.rm = TRUE))
# p.value.Bonferroni
data$p.value.Bonferroni <- as.numeric(gsub(",", ".", as.character(data$p.value.Bonferroni)))
# Count rows where p.value.Bonferroni < 0.05
cat("\nHola", sum(data$p.value.Bonferroni < 0.05, na.rm = TRUE))
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# p.value
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Count rows where p.value < 0.05
cat("Rejected values without Bonferroni:", sum(data$p.value < 0.05, na.rm = TRUE))
# p.value.Bonferroni
data$p.value.Bonferroni <- as.numeric(gsub(",", ".", as.character(data$p.value.Bonferroni)))
# Count rows where p.value.Bonferroni < 0.05
cat("\nRejected values with Bonferroni:", sum(data$p.value.Bonferroni < 0.05, na.rm = TRUE))
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# p.value
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Count rows where p.value < 0.05
cat("Rejected values without Bonferroni:", sum(data$p.value < 0.05, na.rm = TRUE))
# p.value.Bonferroni
data$p.value.Bonferroni <- as.numeric(gsub(",", ".", as.character(data$p.value.Bonferroni)))
# Count rows where p.value.Bonferroni < 0.05
cat("\nRejected values with Bonferroni:", sum(data$p.value.Bonferroni < 0.05, na.rm = TRUE))
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# p.value
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Count rows where p.value < 0.05
cat("Rejected values without Bonferroni:", sum(data$p.value < 0.05, na.rm = TRUE))
# p.value.Bonferroni
data$p.value.Bonferroni <- as.numeric(gsub(",", ".", as.character(data$p.value.Bonferroni)))
# Count rows where p.value.Bonferroni < 0.05
cat("\nRejected values with Bonferroni:", sum(data$p.value.Bonferroni < 0.05, na.rm = TRUE))
