coefficients_non_smokers <- lm_reg_multi(X_non_smokers, Y_non_smokers)
cat("\nCoeficientes para no fumadores:\n")
cat("Intercepto (beta_0):", coefficients_non_smokers[1], "\n")
cat("Edad (beta_1):", coefficients_non_smokers[2], "\n")
cat("BMI (beta_2):", coefficients_non_smokers[3], "\n")
# Función para hacer predicciones con múltiples variables
predict_lm_multi <- function(X, coefficients) {
X <- as.matrix(cbind(Intercept = 1, X))
return(X %*% coefficients)
}
# Función para calcular R² y R² ajustado
get_R_squared_multi <- function(Y, X, coefs) {
preds <- predict_lm_multi(X, coefs)
SSE <- sum((Y - preds)^2)
SST <- sum((Y - mean(Y))^2)
r_squared <- 1 - (SSE / SST)
n <- length(Y)
p <- ncol(X)
r_squared_adjusted <- 1 - ((1 - r_squared) * (n - 1) / (n - p - 1))
return(c(r_squared, r_squared_adjusted))
}
# Evaluar el modelo para fumadores
r_squared_smokers <- get_R_squared_multi(Y_smokers, X_smokers, coefficients_smokers)
cat("\nR² para fumadores:", r_squared_smokers[1], "\n")
cat("R² ajustado para fumadores:", r_squared_smokers[2], "\n")
# Evaluar el modelo para no fumadores
r_squared_non_smokers <- get_R_squared_multi(Y_non_smokers, X_non_smokers, coefficients_non_smokers)
cat("\nR² para no fumadores:", r_squared_non_smokers[1], "\n")
cat("R² ajustado para no fumadores:", r_squared_non_smokers[2], "\n")
summary(lm(smokers$charges ~ smokers$bmi + smokers$age))
summary(lm(non_smokers$charges ~ non_smokers$bmi + non_smokers$age))
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
power.z.test <- function(n1=NULL, sigma1=0.5,
n2=NULL, sigma2=0.5, mu.Ha=0 ,
mu.True=0, alfa=0.05){
# Si n2 es NULL, se realiza un Z-test de una muestra (one-sample)
if(is.null(n2)){
# Calcular el valor crítico de Z para el alfa dado (solo cola superior)
Z_crit = qnorm(1 - alfa)
# Cálculo del denominador para el Z-score
denom = sigma1 / sqrt(n1)
# X_bar es el valor crítico en el que se rechaza la hipótesis nula H0
X_bar = Z_crit * denom + mu.Ha
# Cálculo del Z-score
Z = (X_bar - mu.True) / denom
# Potencia del test
Power = 1 - pnorm(Z)
# Definir los límites mínimo y máximo para el gráfico de las distribuciones
min_lim = min(rnorm(1000, mean = mu.Ha, sd = denom)) -
round(min(rnorm(1000, mean = mu.Ha, sd = denom))) %% 10
max_lim = max(rnorm(1000, mean = mu.True, sd = denom)) +
round(max(rnorm(1000, mean = mu.True, sd = denom))) %% 10
# Crear el gráfico de las distribuciones
plot <- ggplot(data.frame(x = c(min_lim, max_lim)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denom),
col='red') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denom),
col='blue') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denom),
xlim = c(X_bar, max_lim), geom = "area", fill='red') +
geom_vline(xintercept = X_bar, linetype="dotted", size=1) +
annotate("label", x=X_bar, y=Inf, label="alpha", vjust=2) +
theme_minimal() +
ggtitle("H0 vs Ha") +
xlab(expression(bar(X))) + ylab("Densidad")
# Si n2 no es NULL, se realiza un Z-test de dos muestras (two-sample)
} else {
# Calcular el valor crítico de Z para el alfa dado (solo cola superior)
Z_crit = qnorm(1 - alfa)
# Cálculo del error estándar
denom = sqrt((sigma1^2 / n1) + (sigma2^2 / n2))
# X_bar es el valor crítico en el que se rechaza la hipótesis nula H0
X_bar = Z_crit * denom + mu.Ha
# Cálculo del Z-score
Z = (X_bar - mu.True) / denom
# Potencia del test
Power = 1 - pnorm(Z)
# Definir los límites mínimo y máximo para el gráfico de las distribuciones
min_lim = min(rnorm(1000, mean = mu.Ha, sd = denom)) -
round(min(rnorm(1000, mean = mu.Ha, sd = denom))) %% 10
max_lim = max(rnorm(1000, mean = mu.True, sd = denom)) +
round(max(rnorm(1000, mean = mu.True, sd = denom))) %% 10
# Crear el gráfico de las distribuciones
plot <- ggplot(data.frame(x = c(min_lim, max_lim)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denom),
col='red') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denom),
col='blue') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denom),
xlim = c(X_bar, max_lim), geom = "area", fill='red') +
geom_vline(xintercept = X_bar, linetype="dotted", size=1) +
annotate("label", x=X_bar, y=Inf, label="alpha", vjust=2) +
theme_minimal() +
ggtitle("H0 vs Ha") +
xlab(expression(bar(X))) + ylab("Densidad")
}
# Devolver el gráfico y la potencia como una lista
return(list(plot=plot, power=Power))
}
# Niveles de significancia (alfa) que se van a utilizar en los experimentos
alfas <- c(0.05, 0.01, 0.1)
# Experimento one-sample:
# Media poblacional verdadera
mu_true <- 95
# Media bajo la hipótesis alternativa
mu_ha <- 100
# Para cada valor de alfa, se calculan y grafican las distribuciones de H0 y Ha
for (alfa in alfas) {
result <- power.z.test(n1=16, sigma1=16, mu.Ha=mu_ha, mu.True=mu_true, alfa=alfa)
print(paste("Gráfico para alfa =", alfa, "en el test one-sample"))
print(result$plot)
}
# Experimento two-sample:
# Media de la hipótesis alternativa para las dos muestras
mu_ha_two_sample <- 100
# Diferencia entre las medias poblacionales verdaderas de las dos muestras
mu_true_two_sample <- 95
for (alfa in alfas) {
result <- power.z.test(n1=16, sigma1=16, n2=16, sigma2=16,
mu.Ha=mu_ha_two_sample, mu.True=mu_true_two_sample, alfa=alfa)
print(paste("Gráfico para alfa =", alfa, "en el test two-sample"))
print(result$plot)
}
df = read.csv('marketing_campaign.csv', sep='\t')
head(df)
income_master <- df$Income[df$Education == 'Master']
income_phd <- df$Income[df$Education == 'PhD']
income_graduation <- df$Income[df$Education == 'Graduation']
# Se quitan los valores nulos para evitar errores
income_graduation <- na.omit(income_graduation)
income_master <- na.omit(income_master)
income_phd <- na.omit(income_phd)
# Implementación de Z-test one-sided y two-sided
z_test <- function(data1=NULL, sigma1=0.5, data2=NULL, sigma2=0.5,
mu.Ha=0, test.type = c('menor', 'mayor', 'two-sided'),
verbose=TRUE){
# Verificación de argumentos
if(length(test.type) != 1 || !(test.type %in% c('menor', 'mayor', 'two-sided'))){
stop("Por favor, escoge un tipo de Test válido: 'menor', 'mayor' o 'two-sided'.")
}
# One-sample Z-test
if(is.null(data2)){
n1 <- length(data1)
mean_sample <- mean(data1)
Z_score <- (mean_sample - mu.Ha) / (sigma1 / sqrt(n1))
# Cálculo del p-valor
if(test.type == 'menor'){
p_value <- pnorm(Z_score)
} else if(test.type == 'mayor'){
p_value <- 1 - pnorm(Z_score)
} else if(test.type == 'two-sided'){
p_value <- 2 * (1 - pnorm(abs(Z_score)))
}
# Salida opcional
if(verbose){
cat("\tOne-sample Z-Test:\n\nData analizada:", deparse(substitute(data1)),
"\nZ =", Z_score, "P-value =", p_value, "\n\n")
}
return(p_value)
} else {  # Two-sample Z-test
n1 <- length(data1)
n2 <- length(data2)
mean1 <- mean(data1)
mean2 <- mean(data2)
Z_score <- ((mean1 - mean2) - mu.Ha) / sqrt((sigma1^2 / n1) + (sigma2^2 / n2))
# Cálculo del p-valor
if(test.type == 'menor'){
p_value <- pnorm(Z_score)
} else if(test.type == 'mayor'){
p_value <- 1 - pnorm(Z_score)
} else if(test.type == 'two-sided'){
p_value <- 2 * (1 - pnorm(abs(Z_score)))
}
# Salida opcional
if(verbose){
cat("\tTwo-sample Z-Test:\n\nData analizada:", deparse(substitute(data1)),
"y", deparse(substitute(data2)), "\nZ =", Z_score,
"P-value =", p_value, "\n\n")
}
return(p_value)
}
}
z.test.multiple_testing <- function(list_data, list_sigma, test.type = 'two-sided', alfa = 0.05){
# Combinaciones de los grupos a comparar
combinations <- combn(names(list_data), 2)
p_values <- c()
results <- data.frame()
# Iterar sobre todas las combinaciones posibles de pares de grupos
for(i in 1:ncol(combinations)){
data1 <- list_data[[combinations[1, i]]]
data2 <- list_data[[combinations[2, i]]]
sigma1 <- list_sigma[[combinations[1, i]]]
sigma2 <- list_sigma[[combinations[2, i]]]
# Realiza el Z-test para cada par de grupos
p_value <- z_test(data1, sigma1, data2, sigma2, mu.Ha = 0, test.type = test.type, verbose = FALSE)
p_values <- c(p_values, p_value)
# Almacena los resultados en un data frame
results <- rbind(results, data.frame(Grupo1 = combinations[1, i], Grupo2 = combinations[2, i],
P_Value = p_value))
}
# Evaluar significancia
results$Significant <- results$P_Value < alfa
return(results)
}
# Primer experimento:
sigma_graduation <- 28180  # Desviación estándar poblacional
# Test two-sided
p_value_two_sided <- z_test(data1 = income_graduation, sigma1 = sigma_graduation,
mu.Ha = 52000, test.type = 'two-sided')
# Test one-sided (mayor)
p_value_one_sided_mayor <- z_test(data1 = income_graduation, sigma1 = sigma_graduation,
mu.Ha = 52000, test.type = 'mayor')
# Test one-sided (menor)
p_value_one_sided_menor <- z_test(data1 = income_graduation, sigma1 = sigma_graduation,
mu.Ha = 52000, test.type = 'menor')
# Resultados
cat("P-valor (two-sided):", p_value_two_sided, "\n")
cat("P-valor (one-sided mayor):", p_value_one_sided_mayor, "\n")
cat("P-valor (one-sided menor):", p_value_one_sided_menor, "\n")
# Segundo experimento:
list_data <- list(Graduation = income_graduation,
Master = income_master,
PhD = income_phd)
list_sigma <- list(Graduation = 28180,
Master = 20160,
PhD = 20615)
# Realiza los múltiples tests
results <- z.test.multiple_testing(list_data, list_sigma, test.type = 'two-sided', alfa = 0.05)
# Muestra los resultados
print(results)
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
# p.value
data$p.value <- as.numeric(gsub(",", ".", as.character(data$p.value)))
# Count rows where p.value < 0.05
cat("Rejected values without Bonferroni:", sum(data$p.value < 0.05, na.rm = TRUE))
# p.value.Bonferroni
data$p.value.Bonferroni <- as.numeric(gsub(",", ".", as.character(data$p.value.Bonferroni)))
# Count rows where p.value.Bonferroni < 0.05
cat("\nRejected values with Bonferroni:", sum(data$p.value.Bonferroni < 0.05, na.rm = TRUE))
probEmpirica <- function(alpha,m){
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad
res <-rbinom(n, m, alpha) #Resultados de los experimentos
prob <- length(res[res>0]) / n # Probabilidad empírica
return(prob)
}
# Real probability
probReal <- function(alpha, m) {
return(1 - (1 - alpha)^m)
}
# Different values for m
m_values <- 1:50
alpha <- 0.05
# Calculate both probabilities
empirical_probs <- sapply(m_values, function(m) probEmpirica(alpha, m))
real_probs <- sapply(m_values, function(m) probReal(alpha, m))
# Graficar resultados
plot(m_values, empirical_probs, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = "Número de ensayos (m)", ylab = "Probabilidad",
main = "Comparación de Probabilidad Empírica y Real")
lines(m_values, real_probs, type = "o", col = "red", pch = 17)
legend("bottomright", legend = c("Probabilidad Empírica", "Probabilidad Real"),
col = c("blue", "red"), pch = c(16, 17), lty = 1)
# Código modificado utilizando Bonferroni correction
probEmpiricaBonferroni <- function(alpha,m){
actual_alpha <- alpha / m
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad
res <-rbinom(n, m, actual_alpha) #Resultados de los experimentos
prob <- length(res[res>0]) / n # Probabilidad empírica
return(prob)
}
# Real probability
probRealBonferroni <- function(alpha, m) {
actual_alpha <- alpha / m
return(1 - (1 - actual_alpha)^m)
}
# Different values for m
m_values_b <- 1:50
alpha_b <- 0.05
# Calculate both probabilities
empirical_probs_b <- sapply(m_values_b, function(m) probEmpiricaBonferroni(alpha_b, m))
real_probs_b <- sapply(m_values_b, function(m) probRealBonferroni(alpha_b, m))
# Graficar resultados
plot(m_values_b, empirical_probs_b, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = "Número de ensayos (m)", ylab = "Probabilidad",
main = "Comparación de Probabilidad Empírica y Real con Bonferroni Correction")
lines(m_values_b, real_probs_b, type = "o", col = "red", pch = 17)
legend("bottomright", legend = c("Probabilidad Empírica", "Probabilidad Real"),
col = c("blue", "red"), pch = c(16, 17), lty = 1)
# Parte I.
# Separate smokers from non-smokers
insurance <- read.csv("insurance.csv", stringsAsFactors = T)
smokers <- insurance[insurance$smoker == "yes",]
non_smokers <- insurance[insurance$smoker == "no",]
# Calculate cors
cor_smokers <- cor(smokers %>% select(age, bmi, children, charges))
cor_smokers
cor_no_smokers <- cor(non_smokers %>% select(age, bmi, children, charges))
cor_no_smokers
# Linear model
lm_reg <- function(X, Y) {
n <- length(Y)
# Calcular las sumas necesarias
sum_X <- sum(X)
sum_Y <- sum(Y)
sum_XY <- sum(X * Y)
sum_X2 <- sum(X^2)
# Calcular los coeficientes beta_1 (pendiente) y beta_0 (intersección)
beta_1 <- (n * sum_XY - sum_X * sum_Y) / (n * sum_X2 - sum_X^2)
beta_0 <- (sum_Y - beta_1 * sum_X) / n
# Devolver los coeficientes
return(c(beta_0, beta_1))
}
# FFunction to make predictions
predict_lm <- function(X, coefficients) {
return(coefficients[1] + coefficients[2] * X)
}
# Adjust model
coefficients_smokers <- lm_reg(smokers$bmi, smokers$charges)
cat("\nIntercept (beta_0) smokers:", coefficients_smokers[1], "\n")
cat("Slope (beta_1) smokers:", coefficients_smokers[2], "\n")
coefficients_non_smokers <- lm_reg(non_smokers$age, non_smokers$charges)
cat("\nIntercept (beta_0) smokers:", coefficients_non_smokers[1], "\n")
cat("Slope (beta_1) smokers:", coefficients_non_smokers[2], "\n")
get_R_squared <- function(SSE, SST, Y, X, coefs) {
preds <- predict_lm(X, coefs)
SSE <- sum((Y - preds)^2)
SST <- sum((Y - mean(Y))^2)
r_squared <- 1 - (SSE / SST)
n <- length(Y)
p <- 1
r_squared_adjusted <- 1 - ((1 - r_squared) * (n - 1) / (n - p - 1))
return(c(r_squared, r_squared_adjusted))
}
smokers_r_squared <- get_R_squared(SSE_smokers, SST_smokers, smokers$charges, smokers$bmi, coefficients_smokers)
non_smokers_r_squared <- get_R_squared(SSE_non_smokers, SST_non_smokers, non_smokers$charges, non_smokers$age, coefficients_non_smokers)
cat("\nR² smokers:", smokers_r_squared[1], "\n")
cat("R² adjusted smokers:", smokers_r_squared[2], "\n")
cat("\nR² non smokers:", non_smokers_r_squared[1], "\n")
cat("R² adjusted non smokers:", non_smokers_r_squared[2], "\n")
# Smokers scatterplot
ggplot(smokers, aes(x = bmi, y = charges)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Regresión lineal: Gastos Médicos vs. IMC (fumadores)",
x = "Índice de Masa Corporal (BMI)",
y = "Gastos Médicos (Charges)") +
theme_minimal()
# Non smokers scatterplot
ggplot(non_smokers, aes(x = age, y = charges)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Regresión lineal: Gastos Médicos vs. Edad (No fumadores)",
x = "Edad (Age)",
y = "Gastos Médicos (Charges)") +
theme_minimal()
# Parte II
# Usamos la regresión multivariable con representación matricial
# Selección de las variables independientes (predictoras) y dependiente
X_smokers <- smokers %>% select(age, bmi)
Y_smokers <- smokers$charges
X_non_smokers <- non_smokers %>% select(age, bmi)
Y_non_smokers <- non_smokers$charges
# Función para calcular la regresión lineal múltiple
lm_reg_multi <- function(X, Y) {
X <- as.matrix(cbind(Intercept = 1, X))
Y <- as.matrix(Y)
# Calcular los coeficientes usando la fórmula de mínimos cuadrados
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
# Entrenar el modelo para fumadores
coefficients_smokers <- lm_reg_multi(X_smokers, Y_smokers)
cat("\nCoeficientes para fumadores:\n")
cat("Intercepto (beta_0):", coefficients_smokers[1], "\n")
cat("Edad (beta_1):", coefficients_smokers[2], "\n")
cat("BMI (beta_2):", coefficients_smokers[3], "\n")
# Entrenar el modelo para no fumadores
coefficients_non_smokers <- lm_reg_multi(X_non_smokers, Y_non_smokers)
cat("\nCoeficientes para no fumadores:\n")
cat("Intercepto (beta_0):", coefficients_non_smokers[1], "\n")
cat("Edad (beta_1):", coefficients_non_smokers[2], "\n")
cat("BMI (beta_2):", coefficients_non_smokers[3], "\n")
# Función para hacer predicciones con múltiples variables
predict_lm_multi <- function(X, coefficients) {
X <- as.matrix(cbind(Intercept = 1, X))
return(X %*% coefficients)
}
# Función para calcular R² y R² ajustado
get_R_squared_multi <- function(Y, X, coefs) {
preds <- predict_lm_multi(X, coefs)
SSE <- sum((Y - preds)^2)
SST <- sum((Y - mean(Y))^2)
r_squared <- 1 - (SSE / SST)
n <- length(Y)
p <- ncol(X)
r_squared_adjusted <- 1 - ((1 - r_squared) * (n - 1) / (n - p - 1))
return(c(r_squared, r_squared_adjusted))
}
# Evaluar el modelo para fumadores
r_squared_smokers <- get_R_squared_multi(Y_smokers, X_smokers, coefficients_smokers)
cat("\nR² para fumadores:", r_squared_smokers[1], "\n")
cat("R² ajustado para fumadores:", r_squared_smokers[2], "\n")
# Evaluar el modelo para no fumadores
r_squared_non_smokers <- get_R_squared_multi(Y_non_smokers, X_non_smokers, coefficients_non_smokers)
cat("\nR² para no fumadores:", r_squared_non_smokers[1], "\n")
cat("R² ajustado para no fumadores:", r_squared_non_smokers[2], "\n")
summary(lm(smokers$charges ~ smokers$bmi + smokers$age))
summary(lm(non_smokers$charges ~ non_smokers$bmi + non_smokers$age))
install.packages("dplyr")
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
install.packages("tidyr")
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
install.packages("dplyr")
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
install.packages("dplyr")
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
