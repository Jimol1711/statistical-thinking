# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(daggity)
library(dagitty)
library(dagitty)
install.packages("dagitty")
library(dagitty)
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list( x=c(sickness=0, fever=-1, headache=1, dehydration=0, nausea=3),
y=c(sickness=0, fever=-1, headache=1, dehydration=0, nausea=3))
plot(over)
install.packages("dagitty")
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list( x=c(s=0, f=-1, h=1, d=0, n=3),
y=c(s=0, f=-1, h=1, d=0, n=3))
plot(over)
install.packages("dagitty")
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list( x=c(s=0, f=-1, h=1, d=0, n=3),
y=c(s=0, f=-1, h=1, d=0, n=3))
plot(over)
install.packages("dagitty")
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list( x=c(s=0, f=1, h=2, d=3, n=4),
y=c(s=0, f=1, h=2, d=3, n=4))
plot(over)
install.packages("dagitty")
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Análisis bayesiano
library("rethinking")
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list( x=c(s=0, f=1, h=2, d=3, n=4),
y=c(s=0, f=1, h=2, d=3, n=4))
plot(over)
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list( x=c(s=0, f=1, h=2, d=3, n=4),
y=c(s=0, f=1, h=2, d=3, n=4))
plot(over)
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list( x=c(s=2, f=3, h=1, d=3, n=4),
y=c(s=3, f=2, h=1, d=1, n=0))
plot(over)
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list( x=c(s=2, f=3, h=1, d=3, n=4),
y=c(s=3, f=2, h=1, d=1, n=0))
plot(over)
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list(x = c(s = 2, f = 3, h = 1, d = 2, n = 2),
y = c(s = 4, f = 3, h = 3, d = 2, n = 1))
plot(over)
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list(x = c(s = 2, f = 3, h = 1, d = 2, n = 2),
y = c(s = 4, f = 3, h = 3, d = 2, n = 1))
plot(over)
cat("Las independencias condicionales son:")
impliedConditionalIndependencies(over)
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list(x = c(s = 2, f = 3, h = 1, d = 2, n = 2),
y = c(s = 4, f = 3, h = 3, d = 2, n = 1))
plot(over)
cat("Las independencias condicionales son:")
impliedConditionalIndependencies(over)
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list(x = c(s = 2, f = 3, h = 1, d = 2, n = 2),
y = c(s = 4, f = 3, h = 3, d = 2, n = 1))
plot(over)
cat("Las independencias condicionales son:\n")
impliedConditionalIndependencies(over)
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list(x = c(s = 2, f = 3, h = 1, d = 2, n = 2),
y = c(s = 4, f = 3, h = 3, d = 2, n = 1))
plot(over)
cat("Las independencias condicionales son:\n")
impliedConditionalIndependencies(over)
dseparated(s, "d", "h", c())
dseparated("s", "d", "h", c())
dseparated("d", "h", c())
dseparated(over, "d", "h", c())
dseparated(over, "d", "h", c("s"))
dseparated(over, "d", "h", c("f"))
dseparated(over, "d", "s", c("f"))
dseparated(over, "f", "h", c("s"))
dseparated(over, "f", "n", c())
dseparated(over, "h", "n", c())
dseparated(over, "h", "n", c("d"))
dseparated(over, "h", "n", c())
dseparated(over, "n", "s", c())
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list(x = c(s = 2, f = 3, h = 1, d = 2, n = 2),
y = c(s = 4, f = 3, h = 3, d = 2, n = 1))
plot(over)
cat("Las independencias condicionales son:\n")
impliedConditionalIndependencies(over)
dseparated(over, "d", "h", c("s"))
dseparated(over, "d", "h", c("f"))
dseparated(over, "d", "s", c("f"))
dseparated(over, "f", "h", c("s"))
dseparated(over, "f", "n", c())
dseparated(over, "h", "n", c())
dseparated(over, "n", "s", c())
# Manipulación de estructuras
library(tidyverse)
install.packages("dagitty")
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list(x = c(s = 2, f = 3, h = 1, d = 2, n = 2),
y = c(s = 4, f = 3, h = 3, d = 2, n = 1))
plot(over)
cat("Las independencias condicionales son:\n")
impliedConditionalIndependencies(over)
dseparated(over, "d", "h", c("s"))
dseparated(over, "d", "h", c("f"))
dseparated(over, "d", "s", c("f"))
dseparated(over, "f", "h", c("s"))
dseparated(over, "f", "n", c())
dseparated(over, "h", "n", c())
dseparated(over, "n", "s", c())
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Análisis bayesiano
library("rethinking")
install.packages("rethinking")
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Análisis bayesiano
library("rethinking")
install.packages(c("mvtnorm","loo","coda"), repos="https://cloud.r-project.org/",dependencies=TRUE)
options(repos=c(getOption('repos'), rethinking='http://xcelab.net/R'))
install.packages('rethinking',type='source')
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list(x = c(s = 2, f = 3, h = 1, d = 2, n = 2),
y = c(s = 4, f = 3, h = 3, d = 2, n = 1))
plot(over)
cat("Las independencias condicionales son:\n")
impliedConditionalIndependencies(over)
dseparated(over, "d", "h", c("s"))
dseparated(over, "d", "h", c("f"))
dseparated(over, "d", "s", c("f"))
dseparated(over, "f", "h", c("s"))
dseparated(over, "f", "n", c())
dseparated(over, "h", "n", c())
dseparated(over, "n", "s", c())
install.packages("dagitty")
library(dagitty)
# s := sickness, f := fever, h := headache, d := dehydration, n := nausea
over <- dagitty("dag{ s -> f; s -> h; f -> d; n -> d }")
coordinates(over) <- list(x = c(s = 2, f = 3, h = 1, d = 2, n = 2),
y = c(s = 4, f = 3, h = 3, d = 2, n = 1))
plot(over)
cat("Las independencias condicionales son:\n")
impliedConditionalIndependencies(over)
dseparated(over, "d", "h", c("s"))
dseparated(over, "d", "h", c("f"))
dseparated(over, "d", "s", c("f"))
dseparated(over, "f", "h", c("s"))
dseparated(over, "f", "n", c())
dseparated(over, "h", "n", c())
dseparated(over, "n", "s", c())
# Algoritmo Metropolis-Hastings
metropolis_hastings <- function(theta0, alpha, beta, iterations) {
gamma_density <- function(x, alpha, beta) {
if (x > 0) {
return(x^(alpha - 1) * exp(-beta * x))
} else {
return(0)
}
}
samples <- numeric(iterations)
samples[1] <- theta0
for (t in 2:iterations) {
theta_star <- rnorm(1, mean = samples[t - 1], sd = 1)
if (theta_star > 0) {
acceptance_ratio <- gamma_density(theta_star, alpha, beta) /
gamma_density(samples[t - 1], alpha, beta)
} else {
acceptance_ratio <- 0
}
u <- runif(1)
if (u < acceptance_ratio) {
samples[t] <- theta_star
} else {
samples[t] <- samples[t - 1]
}
}
return(samples)
}
# Configuración inicial
alpha <- 5
beta <- 15
theta0 <- 1
# Diferentes cantidades de repeticiones
samples_1k <- metropolis_hastings(theta0, alpha, beta, 1000)
samples_10k <- metropolis_hastings(theta0, alpha, beta, 10000)
samples_100k <- metropolis_hastings(theta0, alpha, beta, 100000)
# Histogramas
par(mfrow = c(1, 3))
hist(samples_1k, breaks = 30, probability = TRUE,
main = "N = 1000", xlab = "Theta", col = "skyblue")
hist(samples_10k, breaks = 30, probability = TRUE,
main = "N = 10000", xlab = "Theta", col = "skyblue")
hist(samples_100k, breaks = 30, probability = TRUE,
main = "N = 100000", xlab = "Theta", col = "skyblue")
# Efecto de la condición inicial
samples_theta0_0.1 <- metropolis_hastings(0.1, alpha, beta, 100000)
samples_theta0_10 <- metropolis_hastings(10, alpha, beta, 100000)
# Histogramas
par(mfrow = c(1, 3))
hist(samples_100k, breaks = 30, probability = TRUE,
main = "Theta0 = 1", xlab = "Theta", col = "skyblue")
hist(samples_theta0_0.1, breaks = 30, probability = TRUE,
main = "Theta0 = 0.1", xlab = "Theta", col = "skyblue")
hist(samples_theta0_10, breaks = 30, probability = TRUE,
main = "Theta0 = 10", xlab = "Theta", col = "skyblue")
# Comparación con la distribución gamma real
samples_real <- rgamma(100000, shape = alpha, rate = beta)
# Graficar comparación
par(mfrow = c(1, 1))
hist(samples_100k, breaks = 30, probability = TRUE,
main = "Comparación con Gamma real", xlab = "Theta", col = "skyblue")
lines(density(samples_real), col = "red", lwd = 2)
legend("topright", legend = c("MH Samples", "Real Gamma"),
col = c("skyblue", "red"), lwd = 2)
