}
# Loop through each numeric column and plot a boxplot
for (col in names(hearth_database[numeric_attrs]) {
# Loop through each numeric column and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[[col]],
main = paste("Boxplot of", col),
xlab = col,
ylab = "Values")
# Add a pause to view each plot before moving to the next one
readline(prompt = "Press [Enter] to continue to the next boxplot...")
}
```
# Loop through each numeric column and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[[col]],
main = paste("Boxplot of", col),
xlab = col,
ylab = "Values")
}
```
# Loop through each numeric column and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[co]],
# Loop through each numeric column and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[col]],
# Loop through each numeric column and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[col],
main = paste("Boxplot of", col),
xlab = col,
ylab = "Values")
}
```
# Loop through each numeric attrbute and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[col],
main = paste("Boxplot of", col),
xlab = col,
ylab = "Values")
}
```
# To avoid warning messages
options(warn = -1)
# Import and reading of csv file hearth_database.csv
hearth_database <- read.table(file="hearth_database.csv",header=T,sep=",")
# Selecting of numeric attributes
numeric_attrs <- c("slope", "ca", "thal", "age", "trestbps", "chol", "thalach", "oldpeak")
# Obtaining of the mean, median and maxes for each numeric attribute
# means, medians and maxes are saved on vectors of their respective names
# Calculate the mean of each numeric attribute
means_all <- sapply(hearth_database, mean)
means <- means_all[numeric_attrs]
rm(means_all)
# Calculate the median of each numeric attribute
medians_all <- sapply(hearth_database, median)
medians <- sapply(medians_all[numeric_attrs], as.numeric)
rm(medians_all)
# Calculate the maximum of each numeric attribute
maxes_all <- sapply(hearth_database, max)
maxes <- sapply(maxes_all[numeric_attrs], as.numeric)
rm(maxes_all)
# Calculate the quintils of each numeric attribute
quintils <- lapply(hearth_database[numeric_attrs], function(col) {
quantile(col, probs=seq(0, 1, by = 0.2), na.rm=TRUE)
})
# Use of summary to compare
summary(hearth_database)
# Calculate the Pearson correlation matrix
correlation_matrix <- cor(hearth_database[numeric_attrs], use="complete.obs", method="pearson")
# Visualization of the correlation matrix
corrplot(correlation_matrix, method="square")
# Loop through each numeric attrbute and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[col],
main = paste("Boxplot of", col),
xlab = col,
ylab = "Values")
}
```
# Loop through each numeric attrbute and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[col],
main = paste("Boxplot of", col),
xlab = col,
ylab = "Values")
rm(col)
}
```
# Loop through each numeric attrbute and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[col],main=paste("Boxplot of", col),xlab=col,ylab="Values")
rm(col)
}
```
unique(hearth_database$target)
clear
# Libraries installed to plot, correlation matrix and boxplots (run this code only once)
install.packages("corrplot")
install.packages("ggplot2")
install.packages("dplyr")
# Libraries installed to plot, correlation matrix and boxplots (run this code only once)
install.packages("corrplot")
install.packages("ggplot2")
install.packages("dplyr")
library(corrplot)
library(ggplot2)
library(dplyr)
# Libraries installed to plot, correlation matrix and boxplots (run this code only once)
install.packages("corrplot")
install.packages("ggplot2")
library(corrplot)
library(ggplot2)
# To avoid warning messages
options(warn = -1)
# Import and reading of csv file hearth_database.csv
hearth_database <- read.table(file="hearth_database.csv",header=T,sep=",")
# Selecting of numeric attributes
numeric_attrs <- c("slope", "ca", "thal", "age", "trestbps", "chol", "thalach", "oldpeak")
# Obtaining of the mean, median and maxes for each numeric attribute
# means, medians and maxes are saved on vectors of their respective names
# Calculate the mean of each numeric attribute
means_all <- sapply(hearth_database, mean)
means <- means_all[numeric_attrs]
rm(means_all)
# Calculate the median of each numeric attribute
medians_all <- sapply(hearth_database, median)
medians <- sapply(medians_all[numeric_attrs], as.numeric)
rm(medians_all)
# Calculate the maximum of each numeric attribute
maxes_all <- sapply(hearth_database, max)
maxes <- sapply(maxes_all[numeric_attrs], as.numeric)
rm(maxes_all)
# Calculate the quintils of each numeric attribute
quintils <- lapply(hearth_database[numeric_attrs], function(col) {
quantile(col, probs=seq(0, 1, by = 0.2), na.rm=TRUE)
})
# Use of summary to compare
summary(hearth_database)
# Calculate the Pearson correlation matrix
correlation_matrix <- cor(hearth_database[numeric_attrs], use="complete.obs", method="pearson")
# Visualization of the correlation matrix
corrplot(correlation_matrix, method="square")
# Libraries installed to plot, correlation matrix and boxplots (run this code only once)
install.packages("corrplot")
install.packages("ggplot2")
library(corrplot)
library(ggplot2)
hearth_databse.target
hearth_databse['target']
hearth_database.target
hearth_database['target']
names(hearth_database)
lapply(numeric_attrs, function(col) plot(density(hearth_database$col, main="Density of col")))
lapply(numeric_attrs, function(col) plot(density(hearth_database$col)))
lapply(numeric_attrs, function(col) plot(density(hearth_database[col])))
hearth_database['thalach']
clear
lapply(numeric_attrs, function(col) plot(density(hearth_database[col])))
lapply(names(hearth_database)[numeric_attrs], function(col) plot(density(hearth_database[col])))
lapply(names(hearth_database)[numeric_attrs], function(col) plot(density(hearth_database[[col])))
lapply(names(hearth_database)[numeric_attrs], function(col) plot(density(hearth_database[[col]])))
lapply(names(hearth_database)[numeric_attrs], function(col) plot(density(as.numeric(hearth_database[[col]])))
d
lapply(names(hearth_database)[numeric_attrs], function(col) plot(density(as.numeric(hearth_database[[col]])))
c
plot(density(as.numeric(hearth_database[['slope']]))
c
plot(density(as.numeric(hearth_database.slope)))
plot(density(as.numeric(hearth_database['slope'])))
plot(density(as.numeric(hearth_database$slope)))
lapply(names(hearth_database)[numeric_attrs], function(col) plot(density(as.numeric(hearth_database$col)))
c
lapply(numeric_attrs, function(col) plot(density(as.numeric(hearth_database$col)))
slope
sapply(numeric_attrs, function(col) plot(density(as.numeric(hearth_database$col)))
d
plot(density(as.numeric(hearth_database$ca)))
plot(density(as.numeric(hearth_database$thal)))
plot(density(as.numeric(hearth_database$age)))
plot(density(as.numeric(hearth_database$trestbps)))
library(corrplot)
library(ggplot2)
# To avoid warning messages
options(warn = -1)
# Import and reading of csv file hearth_database.csv
hearth_database <- read.table(file="hearth_database.csv",header=T,sep=",")
# Selecting of numeric attributes
numeric_attrs <- c("slope", "ca", "thal", "age", "trestbps", "chol", "thalach", "oldpeak")
# Obtaining of the mean, median and maxes for each numeric attribute
# means, medians and maxes are saved on vectors of their respective names
# Calculate the mean of each numeric attribute
means_all <- sapply(hearth_database, mean)
means <- means_all[numeric_attrs]
rm(means_all)
# Calculate the median of each numeric attribute
medians_all <- sapply(hearth_database, median)
medians <- sapply(medians_all[numeric_attrs], as.numeric)
rm(medians_all)
# Calculate the maximum of each numeric attribute
maxes_all <- sapply(hearth_database, max)
maxes <- sapply(maxes_all[numeric_attrs], as.numeric)
rm(maxes_all)
# Calculate the quintils of each numeric attribute
quintils <- lapply(hearth_database[numeric_attrs], function(col) {
quantile(col, probs=seq(0, 1, by = 0.2), na.rm=TRUE)
})
# Use of summary to compare
summary(hearth_database)
# Calculate the Pearson correlation matrix
correlation_matrix <- cor(hearth_database[numeric_attrs], use="complete.obs", method="pearson")
# Visualization of the correlation matrix
corrplot(correlation_matrix, method="square")
# Loop through each numeric attrbute and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[col],main=paste("Boxplot of", col),xlab=col,ylab="Values")
rm(col)
}
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(hearth_database$col)))
rm(col)
}
names(hearth_database[numeric_attrs])
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(hearth_database$col)))
rm(col)
}
plot(density(as.numeric(hearth_database$slope)))
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(hearth_database[col])))
rm(col)
}
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(hearth_database[col])))
rm(col)
}
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(hearth_database[[col]])))
rm(col)
}
```
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(hearth_database[[col]])), main=paste("Density of", col))
rm(col)
}
```
# Separate the dataset into two subsets
yes_target <- hearth_database %>% filter(target=="YES")
# Separate the dataset into two subsets
yes_target <- subset(hearth_database, target=="YES")
no_target <- subset(hearth_database, target=="NO")
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(hearth_database[[col]])), main=paste("Density of", col))
rm(col)
}
```
yes_target
# Separate the dataset into two subsets
yes_target <- subset(hearth_database, target=="YES")
library(corrplot)
library(ggplot2)
# To avoid warning messages
options(warn = -1)
# Import and reading of csv file hearth_database.csv
hearth_database <- read.table(file="hearth_database.csv",header=T,sep=",")
# Selecting of numeric attributes
numeric_attrs <- c("slope", "ca", "thal", "age", "trestbps", "chol", "thalach", "oldpeak")
# Obtaining of the mean, median and maxes for each numeric attribute
# means, medians and maxes are saved on vectors of their respective names
# Calculate the mean of each numeric attribute
means_all <- sapply(hearth_database, mean)
means <- means_all[numeric_attrs]
rm(means_all)
# Calculate the median of each numeric attribute
medians_all <- sapply(hearth_database, median)
medians <- sapply(medians_all[numeric_attrs], as.numeric)
rm(medians_all)
# Calculate the maximum of each numeric attribute
maxes_all <- sapply(hearth_database, max)
maxes <- sapply(maxes_all[numeric_attrs], as.numeric)
rm(maxes_all)
# Calculate the quintils of each numeric attribute
quintils <- lapply(hearth_database[numeric_attrs], function(col) {
quantile(col, probs=seq(0, 1, by = 0.2), na.rm=TRUE)
})
# Use of summary to compare
summary(hearth_database)
# Calculate the Pearson correlation matrix
correlation_matrix <- cor(hearth_database[numeric_attrs], use="complete.obs", method="pearson")
# Visualization of the correlation matrix
corrplot(correlation_matrix, method="square")
# Loop through each numeric attrbute and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[col],main=paste("Boxplot of", col),xlab=col,ylab="Values")
rm(col)
}
# Separate the dataset into two subsets
yes_target <- subset(hearth_database, target=="YES")
no_target <- subset(hearth_database, target=="NO")
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(yes_target[[col]])), main=paste("Density of", col, " for targets with hearth problems"))
plot(density(as.numeric(no_target[[col]])), main=paste("Density of", col, " for targets without hearth problems"))
rm(col)
}
```
# Separate the dataset into two subsets
yes_target <- subset(hearth_database, target=="YES")
no_target <- subset(hearth_database, target=="NO")
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(yes_target[[col]])), main=paste("Density of", col, "for targets with hearth problems"))
plot(density(as.numeric(no_target[[col]])), main=paste("Density of", col, "for targets without hearth problems"))
rm(col)
}
```
gc()
gc()
gc()
library(corrplot)
library(ggplot2)
# To avoid warning messages
options(warn = -1)
# Import and reading of csv file hearth_database.csv
hearth_database <- read.table(file="hearth_database.csv",header=T,sep=",")
# Selecting of numeric attributes
numeric_attrs <- c("slope", "ca", "thal", "age", "trestbps", "chol", "thalach", "oldpeak")
# Obtaining of the mean, median and maxes for each numeric attribute
# means, medians and maxes are saved on vectors of their respective names
# Calculate the mean of each numeric attribute
means_all <- sapply(hearth_database, mean)
means <- means_all[numeric_attrs]
rm(means_all)
# Calculate the median of each numeric attribute
medians_all <- sapply(hearth_database, median)
medians <- sapply(medians_all[numeric_attrs], as.numeric)
rm(medians_all)
# Calculate the maximum of each numeric attribute
maxes_all <- sapply(hearth_database, max)
maxes <- sapply(maxes_all[numeric_attrs], as.numeric)
rm(maxes_all)
# Calculate the quintils of each numeric attribute
quintils <- lapply(hearth_database[numeric_attrs], function(col) {
quantile(col, probs=seq(0, 1, by = 0.2), na.rm=TRUE)
})
# Use of summary to compare
summary(hearth_database)
# Calculate the Pearson correlation matrix
correlation_matrix <- cor(hearth_database[numeric_attrs], use="complete.obs", method="pearson")
# Visualization of the correlation matrix
corrplot(correlation_matrix, method="square")
# Loop through each numeric attrbute and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[col],main=paste("Boxplot of", col),xlab=col,ylab="Values")
rm(col)
}
library(corrplot)
library(ggplot2)
# To avoid warning messages
options(warn = -1)
# Import and reading of csv file hearth_database.csv
hearth_database <- read.table(file="hearth_database.csv",header=T,sep=",")
# Selecting of numeric attributes
numeric_attrs <- c("slope", "ca", "thal", "age", "trestbps", "chol", "thalach", "oldpeak")
# Obtaining of the mean, median and maxes for each numeric attribute
# means, medians and maxes are saved on vectors of their respective names
# Calculate the mean of each numeric attribute
means_all <- sapply(hearth_database, mean)
means <- means_all[numeric_attrs]
rm(means_all)
# Calculate the median of each numeric attribute
medians_all <- sapply(hearth_database, median)
medians <- sapply(medians_all[numeric_attrs], as.numeric)
rm(medians_all)
# Calculate the maximum of each numeric attribute
maxes_all <- sapply(hearth_database, max)
maxes <- sapply(maxes_all[numeric_attrs], as.numeric)
rm(maxes_all)
# Calculate the quintils of each numeric attribute
quintils <- lapply(hearth_database[numeric_attrs], function(col) {
quantile(col, probs=seq(0, 1, by = 0.2), na.rm=TRUE)
})
print(means)
print(medians)
print(maxes)
print(quintils)
# Use of summary to compare
summary(hearth_database)
library(corrplot)
library(ggplot2)
# To avoid warning messages
options(warn = -1)
# Import and reading of csv file hearth_database.csv
hearth_database <- read.table(file="hearth_database.csv",header=T,sep=",")
# Selecting of numeric attributes
numeric_attrs <- c("slope", "ca", "thal", "age", "trestbps", "chol", "thalach", "oldpeak")
# Obtaining of the mean, median and maxes for each numeric attribute
# means, medians and maxes are saved on vectors of their respective names
# Calculate the mean of each numeric attribute
means_all <- sapply(hearth_database, mean)
means <- means_all[numeric_attrs]
rm(means_all)
# Calculate the median of each numeric attribute
medians_all <- sapply(hearth_database, median)
medians <- sapply(medians_all[numeric_attrs], as.numeric)
rm(medians_all)
# Calculate the maximum of each numeric attribute
maxes_all <- sapply(hearth_database, max)
maxes <- sapply(maxes_all[numeric_attrs], as.numeric)
rm(maxes_all)
# Calculate the quintils of each numeric attribute
quintils <- lapply(hearth_database[numeric_attrs], function(col) {
quantile(col, probs=seq(0, 1, by = 0.2), na.rm=TRUE)
})
# Printing the vectors with the metric and quintils for each attribute
print(means)
print(medians)
print(maxes)
print(quintils)
# Use of summary to compare
summary(hearth_database)
# Calculate the Pearson correlation matrix
correlation_matrix <- cor(hearth_database[numeric_attrs], use="complete.obs", method="pearson")
# Visualization of the correlation matrix
corrplot(correlation_matrix, method="square")
# Loop through each numeric attrbute and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[col],main=paste("Boxplot of", col),xlab=col,ylab="Values")
rm(col)
}
# Separate the dataset into two subsets
yes_target <- subset(hearth_database, target=="YES")
no_target <- subset(hearth_database, target=="NO")
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(yes_target[[col]])), main=paste("Density of", col, "for targets with hearth problems"))
plot(density(as.numeric(no_target[[col]])), main=paste("Density of", col, "for targets without hearth problems"))
rm(col)
}
rm(numeric_attrs)
```
# Separate the dataset into two subsets
yes_target <- subset(hearth_database, target=="YES")
no_target <- subset(hearth_database, target=="NO")
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(yes_target[[col]])), main=paste("Density of", col, "for targets with hearth problems"))
plot(density(as.numeric(no_target[[col]])), main=paste("Density of", col, "for targets without hearth problems"))
rm(col)
}
library(corrplot)
library(ggplot2)
# To avoid warning messages
options(warn = -1)
# Import and reading of csv file hearth_database.csv
hearth_database <- read.table(file="hearth_database.csv",header=T,sep=",")
# Selecting of numeric attributes
numeric_attrs <- c("slope", "ca", "thal", "age", "trestbps", "chol", "thalach", "oldpeak")
# Obtaining of the mean, median and maxes for each numeric attribute
# means, medians and maxes are saved on vectors of their respective names
# Calculate the mean of each numeric attribute
means_all <- sapply(hearth_database, mean)
means <- means_all[numeric_attrs]
rm(means_all)
# Calculate the median of each numeric attribute
medians_all <- sapply(hearth_database, median)
medians <- sapply(medians_all[numeric_attrs], as.numeric)
rm(medians_all)
# Calculate the maximum of each numeric attribute
maxes_all <- sapply(hearth_database, max)
maxes <- sapply(maxes_all[numeric_attrs], as.numeric)
rm(maxes_all)
# Calculate the quintils of each numeric attribute
quintils <- lapply(hearth_database[numeric_attrs], function(col) {
quantile(col, probs=seq(0, 1, by = 0.2), na.rm=TRUE)
})
# Printing the vectors with the metric and quintils for each attribute
print(means)
print(medians)
print(maxes)
print(quintils)
# Use of summary to compare
summary(hearth_database)
# Calculate the Pearson correlation matrix
correlation_matrix <- cor(hearth_database[numeric_attrs], use="complete.obs", method="pearson")
# Visualization of the correlation matrix
corrplot(correlation_matrix, method="square")
# Loop through each numeric attrbute and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[col],main=paste("Boxplot of", col),xlab=col,ylab="Values")
rm(col)
}
# Separate the dataset into two subsets
yes_target <- subset(hearth_database, target=="YES")
no_target <- subset(hearth_database, target=="NO")
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(yes_target[[col]])), main=paste("Density of", col, "for targets with hearth problems"))
plot(density(as.numeric(no_target[[col]])), main=paste("Density of", col, "for targets without hearth problems"))
rm(col)
}
rm(yes_target)
rm(no_target)
```
