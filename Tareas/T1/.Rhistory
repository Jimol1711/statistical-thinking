main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(10, cambiar_puerta = TRUE)
n_juegos(10, cambiar_puerta = FALSE)
library(corrplot)
library(ggplot2)
# To avoid warning messages
options(warn = -1)
# Import and reading of csv file hearth_database.csv
hearth_database <- read.table(file="hearth_database.csv",header=T,sep=",")
# Selecting of numeric attributes
numeric_attrs <- c("slope", "ca", "thal", "age", "trestbps", "chol", "thalach", "oldpeak")
# Obtaining of the mean, median and maxes for each numeric attribute
# means, medians and maxes are saved on vectors of their respective names
# Calculate the mean of each numeric attribute
means_all <- sapply(hearth_database, mean)
means <- means_all[numeric_attrs]
rm(means_all)
# Calculate the median of each numeric attribute
medians_all <- sapply(hearth_database, median)
medians <- sapply(medians_all[numeric_attrs], as.numeric)
rm(medians_all)
# Calculate the maximum of each numeric attribute
maxes_all <- sapply(hearth_database, max)
maxes <- sapply(maxes_all[numeric_attrs], as.numeric)
rm(maxes_all)
# Calculate the quintils of each numeric attribute
quintils <- lapply(hearth_database[numeric_attrs], function(col) {
quantile(col, probs=seq(0, 1, by = 0.2), na.rm=TRUE)
})
# Printing the vectors with the metric and quintils for each attribute
print(means)
print(medians)
print(maxes)
print(quintils)
# Use of summary to compare
summary(hearth_database)
# Calculate the Pearson correlation matrix
correlation_matrix <- cor(hearth_database[numeric_attrs], use="complete.obs", method="pearson")
# Visualization of the correlation matrix
corrplot(correlation_matrix, method="square")
# Loop through each numeric attrbute and plot a boxplot
for (col in names(hearth_database[numeric_attrs])) {
boxplot(hearth_database[col],main=paste("Boxplot of", col),xlab=col,ylab="Values")
rm(col)
}
# Separate the dataset into two subsets
yes_target <- subset(hearth_database, target=="YES")
no_target <- subset(hearth_database, target=="NO")
# Loop through each numeric attrbute and plot a density histogram
for (col in names(hearth_database[numeric_attrs])) {
plot(density(as.numeric(yes_target[[col]])), main=paste("Density of", col, "for targets with hearth problems"))
plot(density(as.numeric(no_target[[col]])), main=paste("Density of", col, "for targets without hearth problems"))
rm(col)
}
rm(yes_target)
rm(no_target)
```
# Definir la probabilidad de salir cara
prob_cara <- 5/8
# Vector para almacenar la probabilidad estimada de salir cara en cada paso
prob_estimada <- numeric(1000)
# Simular lanzamientos
num_caras <- 0
# Simular lanzamientos
for (lanzamientos in 1:1000) {
# Simular el lanzamiento de la moneda
if (runif(1) < prob_cara) {
num_caras <- num_caras + 1
}
# Calcular la probabilidad estimada hasta el lanzamiento actual
prob_estimada[lanzamientos] <- num_caras / lanzamientos
}
# Gráfico de la convergencia
plot(1:1000, prob_estimada, type = "l",
xlab = "Número de lanzamientos", ylab = "Probabilidad de cara",
main = "Convergencia de la probabilidad de cara")
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(10, cambiar_puerta = TRUE)
n_juegos(10, cambiar_puerta = FALSE)
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(100, cambiar_puerta = TRUE)
n_juegos(100, cambiar_puerta = FALSE)
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(1000, cambiar_puerta = TRUE)
n_juegos(1000, cambiar_puerta = FALSE)
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
# Current funds
vec_fondos <- c()
while (0<fondos & fondos<200) {
# Simulation of event with 8/19 probability
if (runif(1) <= 8/19) {
# Add apuesta to fondos
fondos <- fondos + apuesta
} else {
# Subtract apuesta from fondos
fondos <- fondos - apuesta
}
# Add fondos to vec_fondos
vec_fondos <- c(vec_fondos, fondos)
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
# Current funds
vec_fondos <- c()
while (0<fondos & fondos<200) {
# Simulation of event with 8/19 probability
if (runif(1) <= 8/19) {
# Add apuesta to fondos
fondos <- fondos + apuesta
} else {
# Subtract apuesta from fondos
fondos <- fondos - apuesta
}
# Add fondos to vec_fondos
vec_fondos <- c(vec_fondos, fondos)
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
# Current funds
vec_fondos <- c()
while (0<fondos & fondos<200) {
# Simulation of event with 8/19 probability
if (runif(1) <= 8/19) {
# Add apuesta to fondos
fondos <- fondos + apuesta
} else {
# Subtract apuesta from fondos
fondos <- fondos - apuesta
}
# Add fondos to vec_fondos
vec_fondos <- c(vec_fondos, fondos)
}
if (fondos > 200) {
cat("Ganó")
} else {
cat("Perdió")
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
# Current funds
vec_fondos <- c()
while (0<fondos & fondos<200) {
# Simulation of event with 8/19 probability
if (runif(1) <= 8/19) {
# Add apuesta to fondos
fondos <- fondos + apuesta
} else {
# Subtract apuesta from fondos
fondos <- fondos - apuesta
}
# Add fondos to vec_fondos
vec_fondos <- c(vec_fondos, fondos)
}
if (fondos > 200) {
cat("Ganó")
} else {
cat("Perdió")
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
# Current funds
vec_fondos <- c()
while (0<fondos & fondos<200) {
# Simulation of event with 8/19 probability
if (runif(1) <= 8/19) {
# Add apuesta to fondos
fondos <- fondos + apuesta
} else {
# Subtract apuesta from fondos
fondos <- fondos - apuesta
}
# Add fondos to vec_fondos
vec_fondos <- c(vec_fondos, fondos)
}
if (fondos > 200) {
cat("Ganó")
} else {
cat("Perdió")
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
# Current funds
vec_fondos <- c()
while (0<fondos & fondos<200) {
# Simulation of event with 8/19 probability
if (runif(1) <= 8/19) {
# Add apuesta to fondos
fondos <- fondos + apuesta
} else {
# Subtract apuesta from fondos
fondos <- fondos - apuesta
}
# Add fondos to vec_fondos
vec_fondos <- c(vec_fondos, fondos)
}
if (fondos > 200) {
cat("Ganó")
} else {
cat("Perdió")
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
# Current funds
vec_fondos <- c()
while (0<fondos & fondos<200) {
# Simulation of event with 8/19 probability
if (runif(1) <= 8/19) {
# Add apuesta to fondos
fondos <- fondos + apuesta
} else {
# Subtract apuesta from fondos
fondos <- fondos - apuesta
}
# Add fondos to vec_fondos
vec_fondos <- c(vec_fondos, fondos)
}
if (fondos > 200) {
cat("Ganó")
} else {
cat("Perdió")
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
# Current funds
vec_fondos <- c()
while (0<fondos & fondos<200) {
# Simulation of event with 8/19 probability
if (runif(1) <= 8/19) {
# Add apuesta to fondos
fondos <- fondos + apuesta
} else {
# Subtract apuesta from fondos
fondos <- fondos - apuesta
}
# Add fondos to vec_fondos
vec_fondos <- c(vec_fondos, fondos)
}
if (fondos >= 200) {
cat("Ganó")
} else {
cat("Perdió")
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
# Current funds
vec_fondos <- c()
while (0<fondos & fondos<200) {
# Simulation of event with 8/19 probability
if (runif(1) <= 8/19) {
# Add apuesta to fondos
fondos <- fondos + apuesta
} else {
# Subtract apuesta from fondos
fondos <- fondos - apuesta
}
# Add fondos to vec_fondos
vec_fondos <- c(vec_fondos, fondos)
}
if (fondos >= 200) {
cat("Ganó")
} else {
cat("Perdió")
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para proyectar 5000 apuestas y obtener la probabilidad de éxito
simula_ruina <- function(fondos_iniciales = 100, apuesta = 5, n_simulaciones = 5000) {
exitos <- 0
for (i in 1:n_simulaciones) {
fondos <- fondos_iniciales
while (0 < fondos & fondos < 200) {
if (runif(1) <= 8/19) {
fondos <- fondos + apuesta
} else {
fondos <- fondos - apuesta
}
}
if (fondos >= 200) {
exitos <- exitos + 1
}
}
probabilidad_exito <- exitos / n_simulaciones
return(probabilidad_exito)
}
# Probar la función con apuestas de 5, 25 y 50
prob_5 <- simula_ruina(apuesta = 5)
prob_25 <- simula_ruina(apuesta = 25)
prob_50 <- simula_ruina(apuesta = 50)
# Mostrar los resultados
cat("Probabilidad de éxito con apuesta de 5: ", prob_5, "\n")
cat("Probabilidad de éxito con apuesta de 25: ", prob_25, "\n")
cat("Probabilidad de éxito con apuesta de 50: ", prob_50, "\n")
# Function to project 5000 bets
bets_simulation <- function(initial_funds = 100, bet = 5, n_simulations = 5000) {
succeses <- 0
for (i in 1:n_simulations) {
funds <- initial_funds
while (0<funds & funds<200) {
if (runif(1) <= 8/19) {
funds <- funds + bet
} else {
funds <- funds - bet
}
}
if (funds >= 200) {
succeses <- succeses + 1
}
}
success_probability <- succeses / n_simulations
return(success_probability)
}
# Probar la función con apuestas de 5, 25 y 50
prob_5 <- bets_simulation(bet = 5)
prob_25 <- bets_simulation(bet = 25)
prob_50 <- bets_simulation(bet = 50)
# Mostrar los resultados
cat("Probabilidad de éxito con apuesta de 5: ", prob_5, "\n")
cat("Probabilidad de éxito con apuesta de 25: ", prob_25, "\n")
cat("Probabilidad de éxito con apuesta de 50: ", prob_50, "\n")
# Function to project 5000 bets
bets_simulation <- function(initial_funds = 100, bet = 5, n_simulations = 5000) {
succeses <- 0
for (i in 1:n_simulations) {
funds <- initial_funds
while (0<funds & funds<200) {
if (runif(1) <= 8/19) {
funds <- funds + bet
} else {
funds <- funds - bet
}
}
if (funds >= 200) {
succeses <- succeses + 1
}
}
success_probability <- succeses / n_simulations
return(success_probability)
}
# Probar la función con apuestas de 5, 25 y 50
prob_5 <- bets_simulation(bet = 5)
prob_25 <- bets_simulation(bet = 25)
prob_50 <- bets_simulation(bet = 50)
# Mostrar los resultados
cat("Probabilidad de éxito con apuesta de 5: ", prob_5, "\n")
cat("Probabilidad de éxito con apuesta de 25: ", prob_25, "\n")
cat("Probabilidad de éxito con apuesta de 50: ", prob_50, "\n")
# Function to project 5000 bets
bets_simulation <- function(initial_funds = 100, bet = 5, n_simulations = 5000) {
succeses <- 0
for (i in 1:n_simulations) {
funds <- initial_funds
while (0<funds & funds<200) {
if (runif(1) <= 8/19) {
funds <- funds + bet
} else {
funds <- funds - bet
}
}
if (funds >= 200) {
succeses <- succeses + 1
}
}
success_probability <- succeses / n_simulations
return(success_probability)
}
# Probar la función con apuestas de 5, 25 y 50
prob_5 <- bets_simulation(bet = 5)
prob_25 <- bets_simulation(bet = 25)
prob_50 <- bets_simulation(bet = 50)
# Mostrar los resultados
cat("Probabilidad de éxito con apuesta de 5: ", prob_5, "\n")
cat("Probabilidad de éxito con apuesta de 25: ", prob_25, "\n")
cat("Probabilidad de éxito con apuesta de 50: ", prob_50, "\n")
