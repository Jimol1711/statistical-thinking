posicion <- sample(1:3,1)            #Elección del participante.
return(Eleccion) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_ganar, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(1000, cambiar_puerta = TRUE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(puertas != 3 & 1:3 != eleccion_inicial)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(eleccion_inicial, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- eleccion_inicial
}
return(puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_ganar, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(1000, cambiar_puerta = TRUE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != eleccion_inicial)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(eleccion_inicial, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- eleccion_inicial
}
return(puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_ganar, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(1000, cambiar_puerta = TRUE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != eleccion_inicial)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_ganar, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(1000, cambiar_puerta = TRUE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_ganar, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(1000, cambiar_puerta = TRUE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_ganar, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(1000, cambiar_puerta = TRUE)
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(1000, cambiar_puerta = TRUE)
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(1000, cambiar_puerta = TRUE)
n_juegos(1000, cambiar_puerta = FALSE)
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(1000, cambiar_puerta = TRUE)
n_juegos(1000, cambiar_puerta = FALSE)
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(1000, cambiar_puerta = TRUE)
n_juegos(1000, cambiar_puerta = FALSE)
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(10, cambiar_puerta = TRUE)
n_juegos(10, cambiar_puerta = FALSE)
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(100, cambiar_puerta = TRUE)
n_juegos(100, cambiar_puerta = FALSE)
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(10, cambiar_puerta = TRUE)
n_juegos(10, cambiar_puerta = FALSE)
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(10, cambiar_puerta = TRUE)
n_juegos(10, cambiar_puerta = FALSE)
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(10, cambiar_puerta = TRUE)
n_juegos(10, cambiar_puerta = FALSE)
# To avoid warning messages
options(warn = -1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
Puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
posicion <- sample(1:3,1)            #Elección del participante.
puertas_abiertas <- which(Puertas != 3 & 1:3 != posicion)
animador_abre <- sample(puertas_abiertas, 1)
# Si el participante decide cambiar de puerta
if (cambiar) {
# El participante cambia a la puerta que queda cerrada
eleccion_final <- setdiff(1:3, c(posicion, animador_abre))
} else {
# El participante se queda con su elección inicial
eleccion_final <- posicion
}
return(Puertas[eleccion_final] == 3) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
results <- logical(n)
for (i in 1:n) {
results[i] <- montyhall(cambiar_puerta)
}
# Calcular la probabilidad de ganar
prob_success <- cumsum(results) / (1:n)
# Graficar la convergencia de la probabilidad de ganar
plot(1:n, prob_success, type = "l",
xlab = "Número de juegos", ylab = "Probabilidad de ganar",
main = paste("Convergencia de la probabilidad de ganar (cambiar =", cambiar_puerta, ")"))
return(prob_success[n])
}
n_juegos(10, cambiar_puerta = TRUE)
n_juegos(10, cambiar_puerta = FALSE)
